// <auto-generated />
using BDSA2017.Assignment04;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BDSA2017.Assignment04.Migrations
{
    [DbContext(typeof(Slot_Car_TournamentContext))]
    [Migration("20170921134032_Initial Migration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BDSA2017.Assignment04.Car", b =>
                {
                    b.Property<int>("CarId")
                        .HasColumnName("carID");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnName("driver_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("CarId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("BDSA2017.Assignment04.CarInRace", b =>
                {
                    b.Property<int>("RaceId")
                        .HasColumnName("raceID");

                    b.Property<int>("CarId")
                        .HasColumnName("carID");

                    b.Property<int>("BestLap")
                        .HasColumnName("best_lap");

                    b.Property<int?>("EndPosition")
                        .HasColumnName("end_position");

                    b.Property<int>("StartPosition")
                        .HasColumnName("start_position");

                    b.Property<int>("TotalRaceTime")
                        .HasColumnName("total_race_time");

                    b.HasKey("RaceId", "CarId");

                    b.HasIndex("CarId");

                    b.HasIndex("RaceId")
                        .HasName("IX_CarInRace");

                    b.ToTable("CarInRace");
                });

            modelBuilder.Entity("BDSA2017.Assignment04.Race", b =>
                {
                    b.Property<int>("RaceId")
                         .HasColumnName("raceID");

                    b.Property<DateTime?>("ActualEndTime")
                        .HasColumnName("actual_end_time")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ActualStartTime")
                        .HasColumnName("actual_start_time")
                        .HasColumnType("datetime");

                    b.Property<int>("NumberOfLaps")
                        .HasColumnName("number_of_laps");

                    b.Property<DateTime?>("PlannedEndTime")
                        .HasColumnName("planned_end_time")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PlannedStartTime")
                        .HasColumnName("planned_start_time")
                        .HasColumnType("datetime");

                    b.Property<int>("TrackID")
                        .IsRequired()
                        .HasColumnName("trackID");

                    b.HasKey("RaceId");

                    b.HasIndex("TrackID");

                    b.ToTable("Race");
                });

            modelBuilder.Entity("BDSA2017.Assignment04.Track", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("BestTime")
                        .HasColumnName("best_time");

                    b.Property<int>("LengthMeter")
                        .HasColumnName("length_meter");

                    b.Property<int>("MaxCars")
                        .HasColumnName("max_cars");

                    b.Property<int>("TrackID")
                        .IsRequired()
                        .HasColumnName("trackID");

                    b.HasKey("TrackID");

                    b.ToTable("Track");
                });

            modelBuilder.Entity("BDSA2017.Assignment04.CarInRace", b =>
                {
                    b.HasOne("BDSA2017.Assignment04.Car", "Car")
                        .WithMany("CarInRace")
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK_CarInRace_Car");

                    b.HasOne("BDSA2017.Assignment04.Race", "Race")
                        .WithMany("CarInRace")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_CarInRace_Race");
                });

            modelBuilder.Entity("BDSA2017.Assignment04.Race", b =>
                {
                    b.HasOne("BDSA2017.Assignment04.Track", "TrackNameNavigation")
                        .WithMany("Race")
                        .HasForeignKey("TrackName")
                        .HasConstraintName("FK_Race_Track");
                });
#pragma warning restore 612, 618
        }
    }
}
